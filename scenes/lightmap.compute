#version 330 core

in  vec2 fragTexCoord;

uniform sampler2D texture0;  // R=meshID, G/B=curr distance‚Äêvector in UV coordinates
uniform vec2 uDimensions;    // render texture dimensions
uniform int uStep;           // current step size in pixels

out vec4 finalColor;


bool between(vec2 v, vec2 bottomLeft, vec2 topRight) {
    vec2 s = step(bottomLeft, v) - step(topRight, v);
    return bool(s.x * s.y);
}

const int OFFSETS_LEN = 4; //8;
const vec2 OFFSETS[OFFSETS_LEN] = vec2[OFFSETS_LEN](
    vec2( 1,  0),  vec2(-1,  0),
    vec2( 0,  1),  vec2( 0, -1)
    //,vec2( 1,  1), vec2(-1,  1),
    // vec2( 1, -1), vec2(-1, -1)
);

vec2 get_dir(vec2 encoded){
    return encoded * 2.0 - 1.0;
}


void main() {
    // read current
    vec4 original = texture(texture0, fragTexCoord);
    float meshId = original.r;
    vec2  bestDir = get_dir(original.gb);
    float bestLen = dot(bestDir,bestDir);

    vec2 UV_offset = vec2(uStep);
    UV_offset /= uDimensions;

    for (int i = 0; i < OFFSETS_LEN; ++i) {
        vec2 testOffset = OFFSETS[i] * UV_offset;
        vec2 testUV = fragTexCoord + testOffset;
        if(!between(testUV, vec2(0,0), vec2(1,1))) continue;

        vec4 test = texture(texture0, testUV);
        float testMeshId = test.r;
        vec2  dir = get_dir(test.gb);

        float len = dot(testOffset,testOffset);

        // different caster, use this offset if better
        if(meshId != testMeshId){
            if(len < bestLen){
                bestLen = len;
                bestDir = testOffset;
            }
        }
        else
        //if(meshId == testMeshId)
        { // same caster, use cumulated offset if better
            vec2 cumulatedOffset = testOffset+dir;
            len = dot(cumulatedOffset, cumulatedOffset);
            if(len<bestLen){
                 bestLen = len;
                 bestDir = cumulatedOffset;
            }
        }
    }

    bestDir = bestDir * 0.5 + 0.5;
    // NOTE: we could output the depth instead of meshId on last draw (step == 1)
    // so the scene shader does not need 2 textures
    finalColor = vec4(meshId, bestDir, 1);
}
