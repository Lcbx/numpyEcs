
in vec3 vertexPosition;
in vec2 vertexTexCoord;
in vec3 vertexNormal;
in vec4 vertexColor;

uniform mat4 mvp;

void vertex(){
	fragTexCoord = vertexTexCoord;
	vec4 vertex = vec4(vertexPosition, 1);
	vertex = mvp*vertex;
	gl_Position = vertex;
}

varying vec2 fragTexCoord;

uniform mat4 invProj; // inverse proj matrix
uniform sampler2D texture0; // depth
//uniform sampler2D normals;   // normals

const int NUM_SAMPLES = 8;
const int NUM_SPIRAL_TURNS = NUM_SAMPLES/2 + 1;

const float PI =  3.141593;
const float twoPI = 6.283186;


// could be moved to uniforms
const float radiusWS = 0.3;
const float radiusWS2 = radiusWS * radiusWS;
const float invRadius2 = 1.0 / radiusWS2;
const float bias = 0.001;
const float intensity = 3.0;

out vec4 finalColor;

float random(vec2 co) {
	return fract(dot(co.xy, vec2(3,13)) * dot(co.yx, vec2(7,4)) * 0.008);
}

bool between(vec2 v, vec2 bottomLeft, vec2 topRight){
	vec2 s = step(bottomLeft, v) - step(topRight, v);
	return bool(s.x * s.y);
}

float randAngle()
{
	uint x = uint(gl_FragCoord.x);
	uint y = uint(gl_FragCoord.y);
	return (30u * x ^ y + 10u * x * y);
}

vec3 getPositionVS(vec2 uv, int mip_level) {
	//float z = textureLod(texture0, uv, float(mip_level)).x; // lod level not working ?
	float z = texelFetch(texture0, ivec2(uv * textureSize(texture0, mip_level)), mip_level).x;
	vec3 clip = vec3(uv,z)*2.0 - vec3(1.0);
	vec4 view = invProj * vec4(clip, 1);
	return view.xyz / view.w;
}


// different AO formulas
float calculateAO(float vv, float vn)
{
	const float epsilon = 0.001;
	
	// (from the HPG12 paper)
	//return float(vv < radiusWS2) * max(vn / (epsilon + vv), 0.0);
	
	// default / recommended
	//float f = max(radiusWS2 - vv, 0.0) / radiusWS2;
	//return f * f * f * max(vn / (epsilon + vv), 0.0);
	
	return max(1.0 - vv * invRadius2, 0.0) * max(vn, 0.0);
	
	//return float(vv < radiusWS2) * max(vn, 0.0);
}


// TODO: apply normal-based blur
// TODO: fix wrong screen border (on written depth)


void fragment() {
	
	vec2 uv = fragTexCoord;
	
	vec3 position = getPositionVS(uv, 0);
	
	// estimate normal from depth
	vec3 dx = dFdx(position);
	vec3 dy = dFdy(position);
	vec3 normal = normalize(cross(dx, dy));
	//vec3 normal = normalize(texture(normals, uv).xyz * 2.0 - vec3(1));
	
	//float noise = random(gl_FragCoord.xy);
	float noise = randAngle();
	//noise = 0;
	
	float invSamples = 1.0 / float(NUM_SAMPLES);
	int max_mip = textureQueryLevels(texture0) - 1;
	float perspectiveRadius = radiusWS / position.z;
	
	float occlusion = 0.0;
	float alpha = 0.5 * invSamples;
	float angle = noise;
	float angleInc = float(NUM_SPIRAL_TURNS) * invSamples * twoPI;
	for (int i = 0; i < NUM_SAMPLES; ++i) {
		alpha += invSamples;
		angle += angleInc;
		
		vec2 disk = vec2(cos(angle), sin(angle));
		float radius = perspectiveRadius * alpha;
		
		vec2 uv2 = uv + disk * radius;
		
		if (between(uv2, vec2(0.0), vec2(1.0))){
			// McGuire mip
			int mipLevel = clamp(findMSB(int(radius * 200)), 0, max_mip);
			
			vec3 Q = getPositionVS(uv2, mipLevel);
			vec3 v = Q - position;
			
			float vv = dot(v, v);
			float vn = dot(v, normal) - bias;
			occlusion += calculateAO(vv, vn);
		}
	}
	occlusion *= invSamples;
	occlusion *= intensity;
	occlusion = 1.0 - occlusion;
	//occlusion = pow(occlusion, intensity);
	occlusion *= occlusion;
	occlusion *= occlusion;
	occlusion = clamp(occlusion, 0.0, 1.0);
	
	finalColor = vec4(vec3(occlusion), 1);
	
	//finalColor = vec4(normal * 0.5 + 0.5, 1);
	//finalColor = vec4(getPositionVS(uv, 5)*0.05 + 0.5,1);
	//finalColor = vec4(getPositionVS_px(ivec2(gl_FragCoord) >> 5, 5)*0.05 + 0.5,1);
	//finalColor = vec4(getPositionVS(uv, findMSB(int(perspectiveRadius * 1000.0)))*0.05 + 0.5,1);
	//finalColor = vec4(vec3(max_mip * 0.1),1);
	//finalColor = vec4(vec3(findMSB(int(perspectiveRadius * 1000.0)) * 0.1 ),1);
	//finalColor = vec4(1);
}
