
in vec3 vertexPosition;
in vec2 vertexTexCoord;
in vec3 vertexNormal;
in vec4 vertexColor;

uniform mat4 mvp;

void vertex(){
	fragTexCoord = vertexTexCoord;
	vec4 vertex = vec4(vertexPosition, 1);
	vertex = mvp*vertex;
	gl_Position = vertex;
}

varying vec2 fragTexCoord;

uniform sampler2D texture0;	// normals
uniform sampler2D DepthMap;	// depth

const int NUM_SAMPLES = 8;
const int NUM_SPIRAL_TURNS = 2;
const int VARIATION = 3;

const float PI =  3.141593;
const float twoPI = 6.283186;
const float epsilon = 0.01;

const float radiusSS  = 0.02; // radius of influence in screen space
const float radiusWS2 = 0.05;
const float uBias = 0.001;

out vec4 finalColor;

float random(vec2 co) {
	return fract(dot(co, vec2(2,11)) * dot(co.yx, vec2(7,5)) * 0.009);
}

// TODO : linearize position
vec3 getPositionVS(vec2 uv) {
	float z = texture(DepthMap, uv).r;
	return vec3(uv, z);
}

float sampleAO(vec2 uv, vec3 position, vec3 normal, int sampleNumber, float startAngle)
{
	// offset on the unit disk, spun for this pixel
	float alpha = (float(sampleNumber) + 1) / float(NUM_SAMPLES);
	float angle = alpha * (float(NUM_SPIRAL_TURNS) * twoPI) + startAngle;
	vec2 unitOffset = vec2(cos(angle), sin(angle));
	vec2 uv2 = uv + unitOffset * alpha * radiusSS;
	
	vec3 Q = getPositionVS(uv2);
	vec3 v = Q - position;
	
	float vv = dot(v, v);
	float vn = dot(v, normal) - uBias;
	
	if(VARIATION == 0){ // (from the HPG12 paper)
		return float(vv < radiusWS2) * max(vn / (epsilon + vv), 0.0);
	}
	
	if(VARIATION == 1){ // default / recommended
		float f = max(radiusWS2 - vv, 0.0) / radiusWS2;
		return f * f * f * max(vn / (epsilon + vv), 0.0);
	}
	
	if(VARIATION == 2){
		float invRadius2 = 1.0 / radiusWS2;
		return 4.0 * max(1.0 - vv * invRadius2, 0.0) * max(vn, 0.0);
	}
	return 2.0 * float(vv < radiusWS2) * max(vn, 0.0);
}


void fragment() {
	
	vec2 uv = fragTexCoord;
	
	vec3 position = getPositionVS(uv);
	vec3 normal = texture(texture0, uv).xyz * 2.0 - vec3(1);
	
	float noise = random(gl_FragCoord.xy);
	float startAngle = twoPI * noise;
	
	float invSamples = 1.0 / float(NUM_SAMPLES);
	vec2 invTexSize = 1.0 / textureSize(DepthMap, 0);
	
	float occlusion = 0.0;
	for (int sampleNumber = 0; sampleNumber < NUM_SAMPLES; ++sampleNumber) {
		occlusion += sampleAO(uv, position, normal, sampleNumber, startAngle);
	}
	
	occlusion = occlusion / float(NUM_SAMPLES);
	occlusion = 1.0 - occlusion;
	occlusion *= occlusion;
	occlusion = clamp(occlusion, 0.0, 1.0);
	
	// NOTE: for some reason drawing the occlusion over the scene fucks up self-shadowing ?
	// even this does it : finalColor = vec4(vec3(occlusion), 0);
	
	//finalColor = vec4(vec3(occlusion) * normal, 1);
	//finalColor = vec4(vec3(occlusion), 1);
	//finalColor = vec4(vec3(occlusion), 1 - occlusion);
	//finalColor = vec4(vec3(occlusion) * normal, 0.3);
	//finalColor = vec4(vec3(noise), 1);
	//finalColor = vec4(position, 1);
	//finalColor = vec4(normal, 1);
	//finalColor = vec4(vec3(1), 0);
}
